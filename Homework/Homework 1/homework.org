#+TITLE: MECH 468 Homework 1
#+AUTHOR: Jasper Chan - 37467164

#+OPTIONS: toc:nil

#+LATEX_HEADER: \definecolor{bg}{rgb}{0.95,0.95,0.95}
#+LATEX_HEADER: \setminted{frame=single,bgcolor=bg,samepage=true}
#+LATEX_HEADER: \setlength{\parindent}{0pt}
#+LATEX_HEADER: \usepackage{float}
#+LATEX_HEADER: \usepackage{svg}
#+LATEX_HEADER: \usepackage{cancel}
#+LATEX_HEADER: \usepackage{amssymb}
#+LATEX_HEADER: \usepackage{mathtools, nccmath}
#+LATEX_HEADER: \sisetup{per-mode=fraction}
#+LATEX_HEADER: \newcommand{\Lwrap}[1]{\left\{#1\right\}}
#+LATEX_HEADER: \newcommand{\Lagr}[1]{\mathcal{L}\Lwrap{#1}}
#+LATEX_HEADER: \newcommand{\Lagri}[1]{\mathcal{L}^{-1}\Lwrap{#1}}
#+LATEX_HEADER: \newcommand{\Ztrans}[1]{\mathcal{Z}\Lwrap{#1}}
#+LATEX_HEADER: \newcommand{\Ztransi}[1]{\mathcal{Z}^{-1}\Lwrap{#1}}
#+LATEX_HEADER: \newcommand{\ZOH}[1]{\text{ZOH}\left(#1\right)}
#+LATEX_HEADER: \DeclarePairedDelimiter{\ceil}{\lceil}{\rceil}
#+LATEX_HEADER: \makeatletter \AtBeginEnvironment{minted}{\dontdofcolorbox} \def\dontdofcolorbox{\renewcommand\fcolorbox[4][]{##4}} \makeatother

#+LATEX_HEADER: \renewcommand\arraystretch{1.2}

#+begin_src ipython :session :results none :exports none
import numpy as np
import pandas as pd
from matplotlib import pyplot as plt
from IPython.display import set_matplotlib_formats
%matplotlib inline
set_matplotlib_formats('svg')
#+end_src
#+begin_src ipython :session :results none :exports none
import IPython
from tabulate import tabulate

class OrgFormatter(IPython.core.formatters.BaseFormatter):
    def __call__(self, obj):
        if(isinstance(obj, str)):
            return None
        if(isinstance(obj, pd.core.indexes.base.Index)):
            return None
        try:
            return tabulate(obj, headers='keys',
                            tablefmt='orgtbl', showindex=False)
        except:
            return None

ip = get_ipython()
ip.display_formatter.formatters['text/org'] = OrgFormatter()
#+end_src
* Theoretical Questions
** Q1
Derive the state-space model for the mass-spring system, where the input $u$ is the displacement of the ground (assume that the ground goes up and down, like a bumpy road), and the outputs are the displacement $y_1$ and $y_2$ as indicated in the figure.
#+ATTR_LATEX: :width 0.2\textwidth
[[file:1_1.png]]

*** Answer
First let's define the force provided by the two springs in the figure
\begin{align}
F_1 &= K_1(y_1 - u) \\
F_2 &= K_2(y_2 - y_1)
\end{align}

Now we can get the equations of motion for each mass:
\begin{align}
M_1\ddot{y_1} &= F_1 - F_2 \nonumber \\
&= K_1(y_1 - u) + K_2(y_1 - y_2) \nonumber \\
&= y_1(K_1 + K_2) + y_2(-K_2) + u(-K_1) \\
M_2\ddot{y_2} &= F_2 \nonumber \\
&= K_2(y_2 - y_1) \nonumber \\
&= y_1(-K_2) + y_2(K_2)
\end{align}

With our equations of motion, we can now decide on a state vector $\mathbf{y}$:
\begin{equation}
\mathbf{y} = 
\begin{bmatrix}
y_1 \\ \dot{y_1} \\ y_2 \\ \dot{y_2}
\end{bmatrix}
\end{equation}

The state-space equations for our system is then:
\begin{align}
\begin{bmatrix}
\dot{y_1} \\ \ddot{y_1} \\ \dot{y_2} \\ \ddot{y_2}
\end{bmatrix}
&=
\begin{bmatrix}
0 & 1 & 0 & 0\\
\frac{K_1 + K_2}{M_1} & 0 & \frac{-K_2}{M_1} & 0 \\
0 & 0 & 0 & 1 \\
\frac{-K_2}{M_2} & 0 & \frac{K_2}{M_2} & 0
\end{bmatrix}
\begin{bmatrix}
y_1 \\ \dot{y_1} \\ y_2 \\ \dot{y_2}
\end{bmatrix}
+
\begin{bmatrix}
0 \\ \frac{-K_1}{M_1} \\ 0 \\ 0
\end{bmatrix}
u \\
\begin{bmatrix}
y_1  \\ y_2 
\end{bmatrix}
&=
\begin{bmatrix}
1 & 0 & 0 & 0 \\
0 & 0 & 1 & 0
\end{bmatrix}
\begin{bmatrix}
y_1 \\ \dot{y_1} \\ y_2 \\ \dot{y_2}
\end{bmatrix}
\end{align}
** Q2
Linearize the following nonlinear state-space model around the equilibrium point
$x_{1o} = 1$,
$x_{2o} = 0$,
$u_{1o} = 1$,
$u_{2o} = 0$.
\begin{align*}
\begin{bmatrix}
\dot{x_1} \\ \dot{x_2}
\end{bmatrix}
&=
\begin{bmatrix}
-2 x_1 x_2^2 + x_2 u_1 \\
-e^{-x_1 u_1} x_2 + x_1 u_2
\end{bmatrix} \\
y &= x_1 u_1 u_2
\end{align*}
*** Answer
First let's find the Jacobians:
\begin{align}
\frac{\partial \mathbf{f}}{\partial \mathbf{x}}
&=
\begin{bmatrix}
\frac{\partial f_1}{\partial x_1} &
\frac{\partial f_1}{\partial x_2} \\
\frac{\partial f_2}{\partial x_1} &
\frac{\partial f_2}{\partial x_2} 
\end{bmatrix} \nonumber \\
&=
\begin{bmatrix}
-2x_2^2 &
-4x_1 x_2 + u_1 \\
e^{-x_1 u_1} x_2 u_1 + u_2 &
-e^{-x_1 u_1}
\end{bmatrix} \\
\frac{\partial \mathbf{f}}{\partial \mathbf{u}}
&=
\begin{bmatrix}
\frac{\partial f_1}{\partial u_1} &
\frac{\partial f_1}{\partial u_2} \\
\frac{\partial f_2}{\partial u_1} &
\frac{\partial f_2}{\partial u_2} 
\end{bmatrix} \nonumber \\
&=
\begin{bmatrix}
x_2 & 0 \\
e^{-x_1 u_1} x_2 x_1 & x_1
\end{bmatrix} \\
\frac{\partial y}{\partial \mathbf{x}}
&=
\begin{bmatrix}
\frac{\partial y}{\partial x_1} &
\frac{\partial y}{\partial x_2}
\end{bmatrix} \nonumber \\
&=
\begin{bmatrix}
u_1 u_2 & 0
\end{bmatrix} \\
\frac{\partial y}{\partial \mathbf{u}}
&=
\begin{bmatrix}
\frac{\partial y}{\partial u_1} &
\frac{\partial y}{\partial u_2}
\end{bmatrix} \nonumber \\
&=
\begin{bmatrix}
x_1 u_2 & x_1 u_1
\end{bmatrix}
\end{align}

Subbing in the values at our operating point:
#+begin_src matlab :session :exports both :results output code
x_1 = 1;
x_2 = 0;
u_1 = 1;
u_2 = 0;

A = [...
    -2*x_2^2, -4*x_1*x_2 + u_1;...
    exp(-x_1*u_1)*x_2*u_1 + u_2, -exp(-x_1*u_1)]
#+end_src

#+RESULTS:
#+begin_src matlab
A =
         0    1.0000
         0   -0.3679
#+end_src

#+begin_src matlab :session :exports both :results output code
B = [...
    x_2, 0;...
    exp(-x_1*u_1)*x_2*x_1, x_1]
#+end_src

#+RESULTS:
#+begin_src matlab
B =
     0     0
     0     1
#+end_src

#+begin_src matlab :session :exports both :results output code
C = [u_1*u_2, 0]
#+end_src

#+RESULTS:
#+begin_src matlab
C =
     0     0
#+end_src

#+begin_src matlab :session :exports both :results output code
D = [x_1*u_2, x_1*u_1]
#+end_src

#+RESULTS:
#+begin_src matlab
D =
     0     1
#+end_src

** Q3
Calculate the matrix exponential $e^{At}$ for the following A matrix.
\begin{equation*}
A = 
\begin{bmatrix}
-1 & 1 & 0 \\
0 & -1 & 0 \\
0 & 0 & -2
\end{bmatrix}
\end{equation*}
*** Answer
First let's find the eigenvalues of $A$
\begin{align*}
0 &= |A - \lambda I| \\
&=
\left|
\begin{bmatrix}
-1 - \lambda & 1 & 0 \\
0 & -1 - \lambda & 0 \\
0 & 0 & -2 - \lambda
\end{bmatrix}
\right| \\
&=
(-1 - \lambda)((-1 - \lambda)(-2 - \lambda)) \\
\\
\lambda &= -1, -1, -2
\end{align*}

Plugging in to find the eigen vectors of $A$:
\begin{equation*}
\begin{bmatrix}
-1 - \lambda & 1 & 0 \\
0 & -1 - \lambda & 0 \\
0 & 0 & -2 - \lambda
\end{bmatrix}
\begin{bmatrix}
x_1 \\ x_2 \\ x_3
\end{bmatrix}
= 0
\end{equation*}
For $\lambda_3 = -2$ we get:
\begin{align*}
\begin{bmatrix}
x_1 + x_2 \\
x_2 \\
0 \\
\end{bmatrix}
&= 0 \\
x_2 &= 0 \\
x_1 &= 0 \\
x_3 &\neq 0 \\
\mathbf{v}_3 = 
\begin{bmatrix}
0 \\ 0 \\ 1
\end{bmatrix}
\end{align*}

For $\lambda_1 = \lambda_2 = -1$ we get:
\begin{align*}
\begin{bmatrix}
x_2
0
-x_3 \\
\end{bmatrix}
&= 0 \\
x_2 &= 0 \\
x_3 &= 0 \\
x_1 &\neq 0 \\
\end{align*}
There is only one free variable in $x_1$, hence this matrix is not diagonalizable.

Let's instead find $e^{At}$ by taking the inverse Laplace transform:

First let's find our inverse matrix[fn:fourthyear] and do the partial fraction expansion:
#+begin_src matlab :session :exports both :results output code
syms s
A = [...
    -1  1  0;...
     0 -1  0;...
     0  0 -2];
inv(s*eye(3) - A)
#+end_src

#+RESULTS:
#+begin_src matlab
ans =
 
[1/(s + 1), 1/(s + 1)^2,         0]
[        0,   1/(s + 1),         0]
[        0,           0, 1/(s + 2)]
#+end_src

[fn:fourthyear] I think it should be reasonable to assume that by 4^{th} year I am in fact capable of doing algebra, so I will be using MATLAB to save time and avoid mistakes.





\begin{align*}
(s\mathbf{I} - A)^{-1}
&=
\begin{bmatrix}
\frac{1}{s + 1} & \frac{1}{(s + 1)^2} & 0 \\
0 & \frac{1}{s + 1} & 0 \\
0 & 0 & \frac{1}{s + 2}
\end{bmatrix} \\
&=
\frac{1}{(s + 1)^2(s + 2)}
\begin{bmatrix}
(s + 1)(s + 2) & (s + 2)  & 0 \\
0 & (s + 1)(s + 2) & 0 \\
0 & 0 & (s + 1)^2
\end{bmatrix} \\
&=
\frac{1}{(s + 1)^2(s + 2)}
\begin{bmatrix}
(s^2 + 3s + 2) & (s + 2)  & 0 \\
0 & (s^2 + 3s + 2) & 0 \\
0 & 0 & (s^2 + 2s + 1)
\end{bmatrix} \\
&=
\frac{K_1}{s + 1} + \frac{K_2}{(s + 1)^2} + \frac{K_3}{s + 2} \\
\end{align*}
Solving for $K_3$:
\begin{align*}
K_3 &= \lim_{s \to -2}(s + 2)
\begin{bmatrix}
\frac{1}{s + 1} & \frac{1}{(s + 1)^2} & 0 \\
0 & \frac{1}{s + 1} & 0 \\
0 & 0 & \frac{1}{s + 2}
\end{bmatrix} = 
\begin{bmatrix}
0 & 0 & 0 \\
0 & 0 & 0 \\
0 & 0 & 1
\end{bmatrix} \\
\end{align*}
Solving for $K_1$ and $K_2$:
\begin{align*}
\begin{bmatrix}
(s^2 + 3s + 2) & (s + 2)  & 0 \\
0 & (s^2 + 3s + 2) & 0 \\
0 & 0 & (s^2 + 2s + 1)
\end{bmatrix}
&= K_1(s + 1)(s + 2) + K_2(s + 2) + K_3(s + 1)^2 \\
&= K_1(s^2 + 3s + 2) + K_2(s + 2) + K_3(s^2 + 2s + 1) \\
&= (K_1 + K_3)s^2 + (3K_1 + K_2 + 2K_3)s + (2K_1 + 2K_2 + K_3)
\end{align*}
\begin{align*}
K_1 + K_3 &= I \\
K_1 &= I - K_3 \\
&= 
\begin{bmatrix} 
1 & 0 & 0 \\
0 & 1 & 0 \\
0 & 0 & 0
\end{bmatrix}
\end{align*}
\begin{align*}
3K_1 + K_2 + 2K_3 &=
\begin{bmatrix} 
3 & 1 & 0 \\
0 & 3 & 0 \\
0 & 0 & 2
\end{bmatrix} \\
K_2 &=
\begin{bmatrix} 
3 & 1 & 0 \\
0 & 3 & 0 \\
0 & 0 & 2
\end{bmatrix}
- 2K_3 - 3K_1 \\
&= 
\begin{bmatrix} 
0 & 1 & 0 \\
0 & 0 & 0 \\
0 & 0 & 0
\end{bmatrix}
\end{align*}

Taking the inverse Laplace transform:
\begin{align*}
e^{At} &=
\Lagri{
\frac{K_1}{s + 1} + \frac{K_2}{(s + 1)^2} + \frac{K_3}{s + 2}
} \\
&= e^{-t}K_1 + te^{-t}K_2 + e^{-2t}K_3 \\
&= 
\begin{bmatrix} 
e^{-t} & te^{-t} & 0 \\
0 & e^{-t} & 0 \\
0 & 0 & e^{-2t}
\end{bmatrix}
\end{align*}

Comparing with MATLAB:
#+begin_src matlab :session :exports both :results output code
syms t;
expm(A*t)
#+end_src

#+RESULTS:
#+begin_src matlab
ans =
 
[exp(-t), t*exp(-t),         0]
[      0,   exp(-t),         0]
[      0,         0, exp(-2*t)]
#+end_src

** Q4
Discretize the following continuous-time state equation with zero-order-hold, with a sampling time $T > 0$.
\begin{equation*}
\dot{\mathbf{x}} =
\begin{bmatrix}
0 & 1 \\
-6 & -5
\end{bmatrix}
\mathbf{x}
+
\begin{bmatrix}
0 \\ 1
\end{bmatrix}
u
\end{equation*}
*** Answer
First let's find $\mathbf{A}_d$:
\begin{align*}
\mathbf{A} &=
\begin{bmatrix}
0 & 1 \\
-6 & -5
\end{bmatrix} \\
\mathbf{A}_d &= e^{\mathbf{A}T} \\
&= \Lagri{(s\mathbf{I} - \mathbf{A})^{-1}}_{t = T} \\
(s\mathbf{I} - \mathbf{A})^{-1} &=
\begin{bmatrix}
s & -1 \\
6 & s + 5
\end{bmatrix}^{-1} \\
&=
\frac{1}{s(s + 5) + 6}
\begin{bmatrix}
s + 5 & 1 \\
-6 & s
\end{bmatrix} 
=
\frac{1}{s^2 + 5s + 6}
\begin{bmatrix}
s + 5 & 1 \\
-6 & s
\end{bmatrix} \\
&=
\frac{1}{(s + 2)(s + 3)}
\begin{bmatrix}
s + 5 & 1 \\
-6 & s
\end{bmatrix} \\
&= \frac{K_1}{s + 2} + \frac{K_2}{s + 3}
\end{align*}
Solving for $K_1$ and $K_2$:
\begin{align*}
K_1 &= \lim_{s \to -2}
\frac{1}{(s + 3)}
\begin{bmatrix}
s + 5 & 1 \\
-6 & s
\end{bmatrix} \\
&=
\begin{bmatrix}
3 & 1 \\
-6 & -2
\end{bmatrix} \\
\end{align*}

\begin{align*}
K_2 &= \lim_{s \to -3}
\frac{1}{(s + 2)}
\begin{bmatrix}
s + 5 & 1 \\
-6 & s
\end{bmatrix} \\
&=
\begin{bmatrix}
-2 & -1 \\
6 & 3
\end{bmatrix} \\
\end{align*}

Taking the inverse Laplace transform:
\begin{align*}
\mathbf{A}_d &= \Lagri{\frac{K_1}{s + 2} + \frac{K_2}{s + 3}}_{t = T} \\
&= K_1e^{-2T} + K_2e^{-3T} \\
&=
\begin{bmatrix}
3e^{-2T} - 2e^{-3T} & e^{-2T} - e^{-3T} \\
-6(e^{-2T} - e^{-3T}) & -2e^{-2T} + 3e^{-3T}
\end{bmatrix}
\end{align*}

Comparing with MATLAB:
#+begin_src matlab :session :exports both :results output code
A = [...
     0  1;...
    -6 -5];
A_d = expm(A*t)
#+end_src

#+RESULTS:
#+begin_src matlab
A_d =
 
[3*exp(-2*t) - 2*exp(-3*t),     exp(-2*t) - exp(-3*t)]
[6*exp(-3*t) - 6*exp(-2*t), 3*exp(-3*t) - 2*exp(-2*t)]
#+end_src

Now we can find $\mathbf{B}_d$:
\begin{align*}
\mathbf{B} &=
\begin{bmatrix}
0 \\ 1
\end{bmatrix} \\
\mathbf{B}_d &= \mathbf{A}^{-1}(\mathbf{A}_d - \mathbf{I})\mathbf{B} \\
&=
\begin{bmatrix}
0 & 1 \\
-6 & -5
\end{bmatrix}^{-1}
\begin{bmatrix}
3e^{-2T} - 2e^{-3T} - 1 & e^{-2T} - e^{-3T} \\
-6(e^{-2T} - e^{-3T}) & -2e^{-2T} + 3e^{-3T} - 1
\end{bmatrix}
\begin{bmatrix}
0 \\ 1
\end{bmatrix} \\
&=
\frac{1}{6}
\begin{bmatrix}
-5 & -1 \\
6 & 0
\end{bmatrix}
\begin{bmatrix}
3e^{-2T} - 2e^{-3T} - 1 & e^{-2T} - e^{-3T} \\
-6(e^{-2T} - e^{-3T}) & -2e^{-2T} + 3e^{-3T} - 1
\end{bmatrix}
\begin{bmatrix}
0 \\ 1
\end{bmatrix} \\
&=
\frac{1}{6}
\begin{bmatrix}
-5 & -1 \\
6 & 0
\end{bmatrix}
\begin{bmatrix}
e^{-2T} - e^{-3T} \\
-2e^{-2T} + 3e^{-3T} - 1
\end{bmatrix} \\
&=
\frac{1}{6}
\begin{bmatrix}
-3e^{-2T} + 2e^{-3T} + 1 \\
6(e^{-2T} - e^{-3T})
\end{bmatrix} \\
&=
\begin{bmatrix}
\frac{-e^{-2T}}{2} + \frac{e^{-3T}}{3} + \frac{1}{6} \\
e^{-2T} - e^{-3T}
\end{bmatrix}
\end{align*}

Comparing with MATLAB:
#+begin_src matlab :session :exports both :results output code
B = [0; 1];
B_d = inv(A)*(A_d - eye(2))*B
#+end_src

#+RESULTS:
#+begin_src matlab
ans =
 
exp(-3*t)/3 - exp(-2*t)/2 + 1/6
          exp(-2*t) - exp(-3*t)
#+end_src

The difference equation is then:
\begin{align*}
\mathbf{x}[k + 1] &=
\mathbf{A}_d
\mathbf{x}[k] +
\mathbf{B}_d
u[k] \\
&=
\begin{bmatrix}
3e^{-2T} - 2e^{-3T} & e^{-2T} - e^{-3T} \\
-6(e^{-2T} - e^{-3T}) & -2e^{-2T} + 3e^{-3T}
\end{bmatrix}
\mathbf{x}[k] +
\begin{bmatrix}
\frac{-e^{-2T}}{2} + \frac{e^{-3T}}{3} + \frac{1}{6} \\
e^{-2T} - e^{-3T}
\end{bmatrix}
u[k]
\end{align*}

We can also compare against MATLAB's zero order hold conversion:
#+begin_src matlab :session :exports both :results output code
T = 1;
sys = ss(A, B, zeros(2), 0);
A_d1 = vpa(subs(A_d, T), 4)
B_d1 = vpa(subs(B_d, T), 4)
sysd = c2d(sys, T, 'zoh'); A_d2 = sysd.A
B_d2 = sysd.B
#+end_src

#+RESULTS:
#+begin_src matlab
T =
     1
 
A_d1 =
 
[ 0.3064, 0.08555]
[-0.5133, -0.1213]
 
 
B_d1 =
 
 0.1156
0.08555
 
A_d2 =
    0.3064    0.0855
   -0.5133   -0.1213
B_d2 =
    0.1156
    0.0855
#+end_src
* MATLAB Question
Consider a rotary pendulum shown below.
[[file:2_2.png]]

The equations of motion can be written as:
\begin{align*}
(J_r + J_p \sin^2 \alpha)\ddot{\theta} +
m_p r \ell \cos\alpha \ddot{\alpha} +
2J_p \sin\alpha \cos\alpha \dot{\theta} \dot{\alpha} -
m_p r \ell \sin\alpha \dot{\alpha}^2
&=
\tau - b_r \dot{\theta} \\
J_p \ddot{\alpha} +
m_p r \ell \cos\alpha \ddot{\theta} -
J_p \sin\alpha \cos\alpha \dot{\theta}^2 +
m_p g \ell \sin{\alpha}
&=
-b_p \dot{\alpha}
\end{align*}
where the notations are indicated in the figure, and $\ell = L_p/2$.

If we approximate the system around $\theta = 0$ and $\alpha = 0$, using $\sin\alpha \approx \alpha$, $\cos\alpha \approx 1$ and $\sin^2\alpha \approx 0$, we can simplify these equations as:
\begin{align*}
J_r \ddot{\theta} + m_p r \ell \ddot{\alpha}
&= \tau - b_r \dot{\theta} \\
m_p r \ell \ddot{\theta} + J_p \ddot{\alpha}
&= -b_p \dot{\alpha} - m_p g \ell \alpha
\end{align*}

From these two equations, we can derive:
\begin{align*}
\ddot{\theta} &= \frac{1}{J_t}
\left\{
J_p(\tau - b_r \dot{\theta}) +
m_p r \ell(b_p \dot{\alpha} + m_p g \ell \alpha)
\right\} \\
\ddot{\alpha} &= \frac{1}{J_t}
\left\{
-J_r(b_p \dot{\alpha} + m_p g \ell \alpha) -
m_p r \ell (\tau - b_r \dot{\theta})
\right\} \\
\end{align*}
where
\begin{equation*}
J_t := J_r J_p - (m_p r \ell)^2
\end{equation*}

By introducing the state variables as
\begin{align*}
x_1 &:= \theta & x_2 &:= \dot{\theta} &
x_3 &:= \alpha & x_4 &:= \dot{\alpha}
\end{align*}
and the input and outputs as
\begin{align*}
u &:= \tau & y_1 &:= \theta & y_2 &:= \alpha
\end{align*}
we can get the state-space model as
\begin{align*}
\dot{\mathbf{x}} &= \mathbf{Ax} + \mathbf{B}u \\
\mathbf{y} &= \mathbf{Cx}
\end{align*}
where
\begin{align*}
\mathbf{A} &:= 
\begin{bmatrix}
0 & 1 & 0 & 0 \\
0 & -J_p b_r/J_t & (m_p \ell)^2 r g/J_t & m_p r \ell b_p/J_t \\
0 & 0 & 0 & 1 \\
0 & m_p r \ell b_r/J_t & -J_r m_p g \ell/J_t & -J_r b_p/J_t
\end{bmatrix} \\
\mathbf{B} &:= \frac{1}{J_t}
\begin{bmatrix}
0 \\ J_p \\ 0 \\ -m_p r \ell
\end{bmatrix} \\
\mathbf{C} &:= 
\begin{bmatrix}
1 & 0 & 0 & 0 \\
0 & 0 & 1 & 0
\end{bmatrix}
\end{align*}
The parameter values are given in the table below.
\begin{align*}
J_r &:= \frac{1}{3} m_r r^2 &
J_p &:= \frac{1}{3} m_p L_p^2 &
\ell &:= \frac{L_p}{2}
\end{align*}

| Notation | Meaning                      | Value and unit                                |
|----------+------------------------------+-----------------------------------------------|
| $m_r$    | rotary arm mass              | \SI{0.095}{\kilo\gram}                        |
| $r$      | rotary arm length            | \SI{0.085}{\meter}                            |
| $b_r$    | viscous friction coefficient | \SI{0.001}{\newton\meter\second\per\radian}   |
| $m_p$    | pendulum mass                | \SI{0.024}{\kilo\gram}                        |
| $L_p$    | pendulum length              | \SI{0.129}{\meter}                            |
| $b_p$    | viscous friction coefficient | \SI{0.00005}{\newton\meter\second\per\radian} |
| $g$      | gravitational acceleration   | \SI{9.81}{\meter\per\second^2}                |

**Task:** Using Simulink, simulate for the case when all initial states are zero except $\alpha(0) = \SI{0.1}{\radian}$, and with no input.
Plot the outputs $\theta(t)$ and $\alpha(t)$.
Add your MATLAB code (m-file and Simulink block) in your report.

** Answer
#+begin_src matlab :session :exports none :eval never-export :results none
simulink
#+end_src
First let's input all the given parameters:
#+begin_src matlab :session :exports both :results output code
m_r = 0.095;  % kg
r = 0.085;  % m
b_r = 0.001;  % Nms/rad
m_p = 0.024;  % kg
L_p = 0.129;  % m
b_p = 0.00005;  % Nms/rad
g = 9.81;  % m/s^2

J_r = (1/3)*m_r*r^2
J_p = (1/3)*m_p*L_p^2
ell = L_p/2
J_t = J_r*J_p - (m_p*r*ell)^2
#+end_src

#+RESULTS:
#+begin_src matlab
J_r =
   2.2879e-04
J_p =
   1.3313e-04
ell =
    0.0645
J_t =
   1.3145e-08
#+end_src

Next let's define our state-space equation matrices:
#+begin_src matlab :session :exports both :results output code
A = [...
    0,                 1,                   0,                 0;...
    0,      -J_p*b_r/J_t, (m_p*ell)^2*r*g/J_t, m_p*r*ell*b_p/J_t;...
    0,                 0,                   0,                 1;...
    0, m_p*r*ell*b_r/J_t,  -J_r*m_p*g*ell/J_t,      -J_r*b_p/J_t]
B = 1/J_t*[0; J_p; 0; -m_p*r*ell]
C = [...
    1 0 0 0;...
    0 0 1 0];
D = [0; 0];
icd = [0; 0; 0.1; 0];
#+end_src

#+RESULTS:
#+begin_src matlab
A =
         0    1.0000         0         0
         0  -10.1274  152.0057    0.5005
         0         0         0    1.0000
         0   10.0097 -264.3080   -0.8702
B =
   1.0e+04 *
         0
    1.0127
         0
   -1.0010
#+end_src

With our state-space matrices prepared, we can open our Simulink model:
#+begin_src matlab :session :exports code :results none
open_system('q2');
print -dsvg -s 'q2_raw.svg';
#+end_src
#+begin_src shell :exports results :results file
inkscape q2_raw.svg --export-text-to-path --export-plain-svg -o q2_simulink.svg
printf 'q2_simulink.svg'
#+end_src

#+RESULTS:
[[file:q2_simulink.svg]]

Running the simulation:
#+begin_src matlab :session :exports both :results output code
out = sim('q2', 3);  % Pendulum settles after about 3s
t = out.simout.Time;
theta = out.simout.Data(:, 1);
alpha = out.simout.Data(:, 2);
#+end_src

#+RESULTS:
#+begin_src matlab
#+end_src

Plotting the data:
#+begin_src matlab :session :exports both :results file
f_name = 'q2_plot.svg'
fig = figure('visible', 'off',...
            'Position', [0 0 600 300]);
plot(t, theta);
hold on;
plot(t, alpha);
l = legend('\theta', '\alpha');
% Disable interpreter so that LaTeX can properly render it
set(l, 'Interpreter', 'none');
set(l, 'color', 'none', 'edgecolor', 'none');
hold off;
fig.Renderer = 'painters';
xlabel('Time [s]')
ylabel('Position [rad]')
title('Rotary Pendulum Simulation')
saveas(fig, f_name);
ans = f_name
#+end_src

#+RESULTS:
[[file:q2_plot.svg]]



